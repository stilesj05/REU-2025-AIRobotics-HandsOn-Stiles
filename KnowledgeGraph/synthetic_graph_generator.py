# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Xu5YJtLBtniG5fLuK9dFGCbYJFxcqWX
"""

# Install networkx if not already installed
!pip install networkx

# Import required libraries
import pandas as pd
import networkx as nx

from google.colab import files

uploaded = files.upload()

# Load each CSV file
agents_df = pd.read_csv('agents.csv')
patients_df = pd.read_csv('patients.csv')
tasks_df = pd.read_csv('tasks.csv')
env_df = pd.read_csv('environment_entities.csv')
rels_df = pd.read_csv('relationship.csv')

# Show the first few rows of each to verify
agents_df.head(), patients_df.head(), tasks_df.head(), env_df.head(), rels_df.head()

print("Agents CSV Columns:", agents_df.columns.tolist())
print("Patients CSV Columns:", patients_df.columns.tolist())
print("Tasks CSV Columns:", tasks_df.columns.tolist())
print("Environment CSV Columns:", env_df.columns.tolist())
print("Relationships CSV Columns:", rels_df.columns.tolist())

# Create a directed graph (Neo4j is directed)
G = nx.DiGraph()

# Add agent nodes
for _, row in agents_df.iterrows():
    G.add_node(row['agentId'], label='Agent', **row.to_dict())

# Add patient nodes
for _, row in patients_df.iterrows():
    G.add_node(row['patientID'], label='Patient', **row.to_dict())

# Add task nodes
for _, row in tasks_df.iterrows():
    G.add_node(row['taskID'], label='Task', **row.to_dict())

# Add environment entity nodes
for _, row in env_df.iterrows():
    G.add_node(row['entityID'], label='Environment', **row.to_dict())

# Add edges from the relationship.csv file
for _, row in rels_df.iterrows():
    source = row['fromId']
    target = row['toId']
    rel_type = row['type']  # relationship type

    # Store all edge info as attributes
    edge_attrs = row.to_dict()
    G.add_edge(source, target, **edge_attrs)

# Export the graph to a GraphML file
nx.write_graphml(G, "hospital_sim.graphml")

from google.colab import files
files.download("hospital_sim.graphml")

#for visualization (neo4j graph picture is a lot more clear, but this is also here)

import matplotlib.pyplot as plt

# Set figure size
plt.figure(figsize=(12, 8))

# Create a simple layout
pos = nx.spring_layout(G, seed=42)

# Draw nodes by type (label)
node_labels = nx.get_node_attributes(G, 'label')

# Color by type
color_map = {
    'Agent': 'skyblue',
    'Patient': 'lightgreen',
    'Task': 'lightcoral',
    'Environment': 'plum'
}
node_colors = [color_map.get(node_labels.get(n, ''), 'gray') for n in G.nodes]

# Draw graph
nx.draw(G, pos, with_labels=True, node_color=node_colors, node_size=800, font_size=8, edge_color='gray')
nx.draw_networkx_labels(G, pos, labels={n: n for n in G.nodes}, font_size=6)

plt.title("Hospital Simulation Graph", fontsize=14)
plt.show()

